0x000:                      | .pos 0
0x000: 30f40002000000000000 | irmovq stack, %rsp
0x00a: 801400000000000000   | call main
0x013: 00                   | halt
                            | 
0x014:                      | main:
0x014: 30f76000000000000000 |     irmovq ele1, %rdi
0x01e: 802800000000000000   |     call rsum_list
0x027: 90                   |     ret
                            | 
0x028:                      | rsum_list:       # rdi as an input, rax as an output, %r8 as val
0x028: 6300                 |     xorq %rax, %rax
0x02a: 6277                 |     andq %rdi, %rdi
0x02c: 743800000000000000   |     jne zero
0x035: 6300                 |     xorq %rax, %rax
0x037: 90                   |     ret
0x038:                      | zero:
0x038: 50870000000000000000 |     mrmovq (%rdi), %r8      # %r8: ls->val
0x042: a07f                 |     pushq %rdi
0x044: a08f                 |     pushq %r8
0x046: 50770800000000000000 |     mrmovq 8(%rdi), %rdi    # %rdi: ls->next
0x050: 802800000000000000   |     call rsum_list          # %rax: rest
0x059: b08f                 |     popq %r8
0x05b: b07f                 |     popq %rdi
0x05d: 6080                 |     addq %r8, %rax
0x05f: 90                   |     ret 
                            | 
0x060:                      | .align 8
0x060:                      | ele1:
0x060: 0a00000000000000     |     .quad 0x00a
0x068: 7000000000000000     |     .quad ele2
0x070:                      | ele2:
0x070: b000000000000000     |     .quad 0x0b0
0x078: 8000000000000000     |     .quad ele3
0x080:                      | ele3:
0x080: 000c000000000000     |     .quad 0xc00
0x088: 0000000000000000     |     .quad 0
                            | 
0x200:                      | .pos 0x200
0x200:                      | stack:
