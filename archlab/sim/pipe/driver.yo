                            | #######################################################################
                            | # Test for copying block of size 3;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f43803000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20300000000000000 | 	irmovq $3, %rdx		# src and dst have 3 elements
0x014: 30f69802000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f76802000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 80fa00000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | # rdi 0xc8 rdx 0x04 # r13 0xe0
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: 6300                 | 	xorq %rax,%rax		# count = 0;
0x03d: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x03f: 71f900000000000000   | 	jle Done		# if so, goto Done:
                            | 	
0x048: 30f90100000000000000 | 	irmovq $1, %r9
0x052: 30fb0800000000000000 | 	irmovq $8, %r11
0x05c: 30f81000000000000000 | 	irmovq $16, %r8
0x066: 202c                 | 	rrmovq %rdx, %r12
0x068: 602c                 | 	addq %rdx, %r12
0x06a: 60cc                 | 	addq %r12, %r12
0x06c: 60cc                 | 	addq %r12, %r12
0x06e: 207d                 | 	rrmovq %rdi, %r13
0x070: 60cd                 | 	addq %r12, %r13
                            | 
0x072:                      | Loop:
                            | 	# rbx = rdi + 8, rcx = rsi + 8
0x072: 2073                 | 	rrmovq %rdi, %rbx
0x074: 2061                 | 	rrmovq %rsi, %rcx
0x076: 60b3                 | 	addq %r11, %rbx
0x078: 60b1                 | 	addq %r11, %rcx
0x07a: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x084: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x08e: 50c30000000000000000 | 	mrmovq (%rbx), %r12
0x098: 40c10000000000000000 | 	rmmovq %r12, (%rcx)
                            | 
0x0a2: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0a4: 71af00000000000000   | 	jle Npos		# if so, goto Npos:
0x0ad: 6090                 | 	addq %r9, %rax		# count++
0x0af:                      | Npos:
0x0af: 62cc                 | 	andq %r12, %r12
0x0b1: 71bc00000000000000   | 	jle Npos2
0x0ba: 6090                 | 	addq %r9, %rax
0x0bc:                      | Npos2:
0x0bc: 6087                 | 	addq %r8, %rdi		# src++
0x0be: 6086                 | 	addq %r8, %rsi		# dst++
0x0c0: 20dc                 | 	rrmovq %r13, %r12
0x0c2: 617c                 | 	subq %rdi, %r12
0x0c4: 767200000000000000   | 	jg Loop			# if so, goto Loop:
                            | 	
0x0cd: 6292                 | 	andq %r9, %rdx
0x0cf: 73f900000000000000   | 	je Done
0x0d8: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x0e2: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x0ec: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0ee: 71f900000000000000   | 	jle Done		# if so, goto Done:
0x0f7: 6090                 | 	addq %r9, %rax		# count++
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x0f9:                      | Done:
0x0f9: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x0fa:                      | End:
                            | #/* $end ncopy-ys */
0x0fa:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 3.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x0fa:                      | check:
                            | 	# Return value test
0x0fa: 30fa0300000000000000 | 	irmovq $3,%r10
0x104: 61a0                 | 	subq %r10,%rax
0x106: 732201000000000000   | 	je checkb
0x10f: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x119: 706002000000000000   | 	jmp cdone
0x122:                      | checkb:
                            | 	# Code length check
0x122: 30f0fa00000000000000 | 	irmovq EndFun,%rax
0x12c: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x136: 6120                 | 	subq %rdx,%rax
0x138: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x142: 6102                 | 	subq %rax,%rdx
0x144: 756001000000000000   | 	jge checkm
0x14d: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x157: 706002000000000000   | 	jmp cdone
0x160:                      | checkm:
0x160: 30f29802000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x16a: 30f36802000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x174: 30f70300000000000000 | 	irmovq $3,%rdi  # Count
0x17e: 6277                 | 	andq %rdi,%rdi
0x180: 73de01000000000000   | 	je checkpre         # Skip check if count = 0
0x189:                      | mcloop:
0x189: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x193: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x19d: 6160                 | 	subq %rsi,%rax
0x19f: 73bb01000000000000   | 	je  mok
0x1a8: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x1b2: 706002000000000000   | 	jmp cdone
0x1bb:                      | mok:
0x1bb: 30f00800000000000000 | 	irmovq $8,%rax
0x1c5: 6002                 | 	addq %rax,%rdx	  # dest ++
0x1c7: 6003                 | 	addq %rax,%rbx    # src++
0x1c9: 30f00100000000000000 | 	irmovq $1,%rax
0x1d3: 6107                 | 	subq %rax,%rdi    # cnt--
0x1d5: 768901000000000000   | 	jg mcloop
0x1de:                      | checkpre:
                            | 	# Check for corruption
0x1de: 30f29002000000000000 | 	irmovq Predest,%rdx
0x1e8: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x1f2: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x1fc: 6120                 | 	subq %rdx,%rax
0x1fe: 731a02000000000000   | 	je checkpost
0x207: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x211: 706002000000000000   | 	jmp cdone
0x21a:                      | checkpost:
                            | 	# Check for corruption
0x21a: 30f2b002000000000000 | 	irmovq Postdest,%rdx
0x224: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x22e: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x238: 6120                 | 	subq %rdx,%rax
0x23a: 735602000000000000   | 	je checkok
0x243: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x24d: 706002000000000000   | 	jmp cdone
0x256:                      | checkok:
                            | 	# Successful checks
0x256: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x260:                      | cdone:
0x260: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x268:                      | 	.align 8
0x268:                      | src:
0x268: 0100000000000000     | 	.quad 1
0x270: 0200000000000000     | 	.quad 2
0x278: 0300000000000000     | 	.quad 3
0x280: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x290:                      | 	.align 16
0x290:                      | Predest:
0x290: fadebc0000000000     | 	.quad 0xbcdefa
0x298:                      | dest:
0x298: abefcd0000000000     | 	.quad 0xcdefab
0x2a0: abefcd0000000000     | 	.quad 0xcdefab
0x2a8: abefcd0000000000     | 	.quad 0xcdefab
0x2b0:                      | Postdest:
0x2b0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x2b8:                      | .align 8
                            | # Run time stack
0x2b8: 0000000000000000     | 	.quad 0
0x2c0: 0000000000000000     | 	.quad 0
0x2c8: 0000000000000000     | 	.quad 0
0x2d0: 0000000000000000     | 	.quad 0
0x2d8: 0000000000000000     | 	.quad 0
0x2e0: 0000000000000000     | 	.quad 0
0x2e8: 0000000000000000     | 	.quad 0
0x2f0: 0000000000000000     | 	.quad 0
0x2f8: 0000000000000000     | 	.quad 0
0x300: 0000000000000000     | 	.quad 0
0x308: 0000000000000000     | 	.quad 0
0x310: 0000000000000000     | 	.quad 0
0x318: 0000000000000000     | 	.quad 0
0x320: 0000000000000000     | 	.quad 0
0x328: 0000000000000000     | 	.quad 0
0x330: 0000000000000000     | 	.quad 0
                            | 
0x338:                      | Stack:
