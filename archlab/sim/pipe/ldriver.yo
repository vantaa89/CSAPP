                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4b806000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f63804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f72802000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: 6222                 | 	andq %rdx, %rdx
0x036: 712102000000000000   | 	jle Done
0x03f: 202e                 | 	rrmovq %rdx, %r14
0x041: c0fef8ffffffffffffff | 	iaddq $-8, %r14
0x04b: 71cf01000000000000   | 	jle Loop1
                            | 	
0x054:                      | Loop8: 
0x054: 50870000000000000000 | 	mrmovq (%rdi), %r8	# read val from src...
0x05e: 50970800000000000000 | 	mrmovq 8(%rdi), %r9	# read val from src...
0x068: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x072: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# read val from src...
0x07c: 50c72000000000000000 | 	mrmovq 32(%rdi), %r12	# read val from src...
0x086: 50d72800000000000000 | 	mrmovq 40(%rdi), %r13	# read val from src...
0x090: 50e73000000000000000 | 	mrmovq 48(%rdi), %r14	# read val from src...
0x09a: 50373800000000000000 | 	mrmovq 56(%rdi), %rbx	# read val from src...
0x0a4: 40860000000000000000 | 	rmmovq %r8, (%rsi)	# ...and store it to dst
0x0ae: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)	# ...and store it to dst
0x0b8: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x0c2: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)	# ...and store it to dst
0x0cc: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)	# ...and store it to dst
0x0d6: 40d62800000000000000 | 	rmmovq %r13, 40(%rsi)	# ...and store it to dst
0x0e0: 40e63000000000000000 | 	rmmovq %r14, 48(%rsi)	# ...and store it to dst
0x0ea: 40363800000000000000 | 	rmmovq %rbx, 56(%rsi)	# ...and store it to dst
0x0f4: 6288                 | 	andq %r8, %r8		# val <= 0?
0x0f6: 710901000000000000   | 	jle Npos81		# if so, goto Npos:
0x0ff: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x109:                      | Npos81:	
0x109: 6299                 | 	andq %r9, %r9		# val <= 0?
0x10b: 711e01000000000000   | 	jle Npos82		# if so, goto Npos:
0x114: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x11e:                      | Npos82:	
0x11e: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x120: 713301000000000000   | 	jle Npos83		# if so, goto Npos:
0x129: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x133:                      | Npos83:	
0x133: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x135: 714801000000000000   | 	jle Npos84		# if so, goto Npos:
0x13e: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x148:                      | Npos84:
0x148: 62cc                 | 	andq %r12, %r12		# val <= 0?
0x14a: 715d01000000000000   | 	jle Npos85		# if so, goto Npos:
0x153: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x15d:                      | Npos85:	
0x15d: 62dd                 | 	andq %r13, %r13		# val <= 0?
0x15f: 717201000000000000   | 	jle Npos86		# if so, goto Npos:
0x168: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x172:                      | Npos86:	
0x172: 62ee                 | 	andq %r14, %r14		# val <= 0?
0x174: 718701000000000000   | 	jle Npos87		# if so, goto Npos:
0x17d: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x187:                      | Npos87:	
0x187: 6233                 | 	andq %rbx, %rbx		# val <= 0?
0x189: 719c01000000000000   | 	jle Npos88		# if so, goto Npos:
0x192: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x19c:                      | Npos88:
0x19c: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx
0x1a6: c0f74000000000000000 | 	iaddq $64, %rdi
0x1b0: c0f64000000000000000 | 	iaddq $64, %rsi
0x1ba: 30faf8ffffffffffffff | 	irmovq $-8, %r10
0x1c4: 602a                 | 	addq %rdx, %r10
0x1c6: 765400000000000000   | 	jg Loop8
                            | 
0x1cf: 50a70000000000000000 | Loop1:	mrmovq (%rdi), %r10	# read val from src...
0x1d9: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x1e3: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x1e5: 71f801000000000000   | 	jle Npos1		# if so, goto Npos:
0x1ee: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x1f8:                      | Npos1:	
0x1f8: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x202: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x20c: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x216: 6222                 | 	andq %rdx,%rdx		# len > 0?
0x218: 76cf01000000000000   | 	jg Loop1			# if so, goto Loop:
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x221:                      | Done:
0x221: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x222:                      | End:
                            | #/* $end ncopy-ys */
0x222:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x228:                      | 	.align 8
0x228:                      | src:
0x228: 0100000000000000     | 	.quad 1
0x230: 0200000000000000     | 	.quad 2
0x238: 0300000000000000     | 	.quad 3
0x240: fcffffffffffffff     | 	.quad -4
0x248: 0500000000000000     | 	.quad 5
0x250: 0600000000000000     | 	.quad 6
0x258: f9ffffffffffffff     | 	.quad -7
0x260: 0800000000000000     | 	.quad 8
0x268: f7ffffffffffffff     | 	.quad -9
0x270: 0a00000000000000     | 	.quad 10
0x278: 0b00000000000000     | 	.quad 11
0x280: f4ffffffffffffff     | 	.quad -12
0x288: f3ffffffffffffff     | 	.quad -13
0x290: f2ffffffffffffff     | 	.quad -14
0x298: 0f00000000000000     | 	.quad 15
0x2a0: f0ffffffffffffff     | 	.quad -16
0x2a8: 1100000000000000     | 	.quad 17
0x2b0: eeffffffffffffff     | 	.quad -18
0x2b8: 1300000000000000     | 	.quad 19
0x2c0: ecffffffffffffff     | 	.quad -20
0x2c8: ebffffffffffffff     | 	.quad -21
0x2d0: 1600000000000000     | 	.quad 22
0x2d8: 1700000000000000     | 	.quad 23
0x2e0: e8ffffffffffffff     | 	.quad -24
0x2e8: 1900000000000000     | 	.quad 25
0x2f0: 1a00000000000000     | 	.quad 26
0x2f8: 1b00000000000000     | 	.quad 27
0x300: e4ffffffffffffff     | 	.quad -28
0x308: e3ffffffffffffff     | 	.quad -29
0x310: 1e00000000000000     | 	.quad 30
0x318: 1f00000000000000     | 	.quad 31
0x320: e0ffffffffffffff     | 	.quad -32
0x328: 2100000000000000     | 	.quad 33
0x330: deffffffffffffff     | 	.quad -34
0x338: ddffffffffffffff     | 	.quad -35
0x340: dcffffffffffffff     | 	.quad -36
0x348: 2500000000000000     | 	.quad 37
0x350: 2600000000000000     | 	.quad 38
0x358: d9ffffffffffffff     | 	.quad -39
0x360: d8ffffffffffffff     | 	.quad -40
0x368: 2900000000000000     | 	.quad 41
0x370: 2a00000000000000     | 	.quad 42
0x378: d5ffffffffffffff     | 	.quad -43
0x380: d4ffffffffffffff     | 	.quad -44
0x388: d3ffffffffffffff     | 	.quad -45
0x390: 2e00000000000000     | 	.quad 46
0x398: d1ffffffffffffff     | 	.quad -47
0x3a0: d0ffffffffffffff     | 	.quad -48
0x3a8: 3100000000000000     | 	.quad 49
0x3b0: 3200000000000000     | 	.quad 50
0x3b8: 3300000000000000     | 	.quad 51
0x3c0: ccffffffffffffff     | 	.quad -52
0x3c8: 3500000000000000     | 	.quad 53
0x3d0: caffffffffffffff     | 	.quad -54
0x3d8: c9ffffffffffffff     | 	.quad -55
0x3e0: c8ffffffffffffff     | 	.quad -56
0x3e8: 3900000000000000     | 	.quad 57
0x3f0: 3a00000000000000     | 	.quad 58
0x3f8: c5ffffffffffffff     | 	.quad -59
0x400: 3c00000000000000     | 	.quad 60
0x408: c3ffffffffffffff     | 	.quad -61
0x410: c2ffffffffffffff     | 	.quad -62
0x418: c1ffffffffffffff     | 	.quad -63
0x420: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x430:                      | 	.align 16
0x430:                      | Predest:
0x430: fadebc0000000000     | 	.quad 0xbcdefa
0x438:                      | dest:
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630:                      | Postdest:
0x630: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x638:                      | .align 8
                            | # Run time stack
0x638: 0000000000000000     | 	.quad 0
0x640: 0000000000000000     | 	.quad 0
0x648: 0000000000000000     | 	.quad 0
0x650: 0000000000000000     | 	.quad 0
0x658: 0000000000000000     | 	.quad 0
0x660: 0000000000000000     | 	.quad 0
0x668: 0000000000000000     | 	.quad 0
0x670: 0000000000000000     | 	.quad 0
0x678: 0000000000000000     | 	.quad 0
0x680: 0000000000000000     | 	.quad 0
0x688: 0000000000000000     | 	.quad 0
0x690: 0000000000000000     | 	.quad 0
0x698: 0000000000000000     | 	.quad 0
0x6a0: 0000000000000000     | 	.quad 0
0x6a8: 0000000000000000     | 	.quad 0
0x6b0: 0000000000000000     | 	.quad 0
                            | 
0x6b8:                      | Stack:
