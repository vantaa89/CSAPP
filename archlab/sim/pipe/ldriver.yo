                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f40806000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f68803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f78001000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: 6222                 | 	andq %rdx, %rdx
0x036: 717d01000000000000   | 	jle Done
0x03f: 202e                 | 	rrmovq %rdx, %r14
0x041: c0fefcffffffffffffff | 	iaddq $-4, %r14
0x04b: 712b01000000000000   | 	jle Loop1
                            | 	
0x054:                      | Loop2: 
0x054: 50870000000000000000 | 	mrmovq (%rdi), %r8	# read val from src...
0x05e: 50970800000000000000 | 	mrmovq 8(%rdi), %r9	# read val from src...
0x068: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x072: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# read val from src...
0x07c: 40860000000000000000 | 	rmmovq %r8, (%rsi)	# ...and store it to dst
0x086: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)	# ...and store it to dst
0x090: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x09a: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)	# ...and store it to dst
0x0a4: 6288                 | 	andq %r8, %r8		# val <= 0?
0x0a6: 71b900000000000000   | 	jle Npos21		# if so, goto Npos:
0x0af: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0b9:                      | Npos21:	
0x0b9: 6299                 | 	andq %r9, %r9		# val <= 0?
0x0bb: 71ce00000000000000   | 	jle Npos22		# if so, goto Npos:
0x0c4: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0ce:                      | Npos22:	
0x0ce: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0d0: 71e300000000000000   | 	jle Npos23		# if so, goto Npos:
0x0d9: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0e3:                      | Npos23:	
0x0e3: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x0e5: 71f800000000000000   | 	jle Npos24		# if so, goto Npos:
0x0ee: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0f8:                      | Npos24:
0x0f8: c0f2fcffffffffffffff | 	iaddq $-4, %rdx
0x102: c0f72000000000000000 | 	iaddq $32, %rdi
0x10c: c0f62000000000000000 | 	iaddq $32, %rsi
0x116: 202a                 | 	rrmovq %rdx, %r10
0x118: c0fafcffffffffffffff | 	iaddq $-4, %r10
0x122: 765400000000000000   | 	jg Loop2
                            | 
0x12b: 50a70000000000000000 | Loop1:	mrmovq (%rdi), %r10	# read val from src...
0x135: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x13f: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x141: 715401000000000000   | 	jle Npos1		# if so, goto Npos:
0x14a: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x154:                      | Npos1:	
0x154: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x15e: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x168: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x172: 6222                 | 	andq %rdx,%rdx		# len > 0?
0x174: 762b01000000000000   | 	jg Loop1			# if so, goto Loop:
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x17d:                      | Done:
0x17d: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x17e:                      | End:
                            | #/* $end ncopy-ys */
0x17e:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x180:                      | 	.align 8
0x180:                      | src:
0x180: ffffffffffffffff     | 	.quad -1
0x188: 0200000000000000     | 	.quad 2
0x190: 0300000000000000     | 	.quad 3
0x198: fcffffffffffffff     | 	.quad -4
0x1a0: 0500000000000000     | 	.quad 5
0x1a8: 0600000000000000     | 	.quad 6
0x1b0: f9ffffffffffffff     | 	.quad -7
0x1b8: f8ffffffffffffff     | 	.quad -8
0x1c0: 0900000000000000     | 	.quad 9
0x1c8: f6ffffffffffffff     | 	.quad -10
0x1d0: 0b00000000000000     | 	.quad 11
0x1d8: f4ffffffffffffff     | 	.quad -12
0x1e0: 0d00000000000000     | 	.quad 13
0x1e8: 0e00000000000000     | 	.quad 14
0x1f0: f1ffffffffffffff     | 	.quad -15
0x1f8: 1000000000000000     | 	.quad 16
0x200: efffffffffffffff     | 	.quad -17
0x208: 1200000000000000     | 	.quad 18
0x210: edffffffffffffff     | 	.quad -19
0x218: 1400000000000000     | 	.quad 20
0x220: 1500000000000000     | 	.quad 21
0x228: eaffffffffffffff     | 	.quad -22
0x230: 1700000000000000     | 	.quad 23
0x238: 1800000000000000     | 	.quad 24
0x240: e7ffffffffffffff     | 	.quad -25
0x248: e6ffffffffffffff     | 	.quad -26
0x250: 1b00000000000000     | 	.quad 27
0x258: 1c00000000000000     | 	.quad 28
0x260: e3ffffffffffffff     | 	.quad -29
0x268: 1e00000000000000     | 	.quad 30
0x270: e1ffffffffffffff     | 	.quad -31
0x278: e0ffffffffffffff     | 	.quad -32
0x280: 2100000000000000     | 	.quad 33
0x288: deffffffffffffff     | 	.quad -34
0x290: 2300000000000000     | 	.quad 35
0x298: 2400000000000000     | 	.quad 36
0x2a0: dbffffffffffffff     | 	.quad -37
0x2a8: daffffffffffffff     | 	.quad -38
0x2b0: 2700000000000000     | 	.quad 39
0x2b8: 2800000000000000     | 	.quad 40
0x2c0: 2900000000000000     | 	.quad 41
0x2c8: 2a00000000000000     | 	.quad 42
0x2d0: 2b00000000000000     | 	.quad 43
0x2d8: 2c00000000000000     | 	.quad 44
0x2e0: d3ffffffffffffff     | 	.quad -45
0x2e8: d2ffffffffffffff     | 	.quad -46
0x2f0: 2f00000000000000     | 	.quad 47
0x2f8: 3000000000000000     | 	.quad 48
0x300: 3100000000000000     | 	.quad 49
0x308: 3200000000000000     | 	.quad 50
0x310: 3300000000000000     | 	.quad 51
0x318: ccffffffffffffff     | 	.quad -52
0x320: cbffffffffffffff     | 	.quad -53
0x328: caffffffffffffff     | 	.quad -54
0x330: c9ffffffffffffff     | 	.quad -55
0x338: c8ffffffffffffff     | 	.quad -56
0x340: c7ffffffffffffff     | 	.quad -57
0x348: c6ffffffffffffff     | 	.quad -58
0x350: c5ffffffffffffff     | 	.quad -59
0x358: c4ffffffffffffff     | 	.quad -60
0x360: c3ffffffffffffff     | 	.quad -61
0x368: c2ffffffffffffff     | 	.quad -62
0x370: c1ffffffffffffff     | 	.quad -63
0x378: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x380:                      | 	.align 16
0x380:                      | Predest:
0x380: fadebc0000000000     | 	.quad 0xbcdefa
0x388:                      | dest:
0x388: abefcd0000000000     | 	.quad 0xcdefab
0x390: abefcd0000000000     | 	.quad 0xcdefab
0x398: abefcd0000000000     | 	.quad 0xcdefab
0x3a0: abefcd0000000000     | 	.quad 0xcdefab
0x3a8: abefcd0000000000     | 	.quad 0xcdefab
0x3b0: abefcd0000000000     | 	.quad 0xcdefab
0x3b8: abefcd0000000000     | 	.quad 0xcdefab
0x3c0: abefcd0000000000     | 	.quad 0xcdefab
0x3c8: abefcd0000000000     | 	.quad 0xcdefab
0x3d0: abefcd0000000000     | 	.quad 0xcdefab
0x3d8: abefcd0000000000     | 	.quad 0xcdefab
0x3e0: abefcd0000000000     | 	.quad 0xcdefab
0x3e8: abefcd0000000000     | 	.quad 0xcdefab
0x3f0: abefcd0000000000     | 	.quad 0xcdefab
0x3f8: abefcd0000000000     | 	.quad 0xcdefab
0x400: abefcd0000000000     | 	.quad 0xcdefab
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580:                      | Postdest:
0x580: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x588:                      | .align 8
                            | # Run time stack
0x588: 0000000000000000     | 	.quad 0
0x590: 0000000000000000     | 	.quad 0
0x598: 0000000000000000     | 	.quad 0
0x5a0: 0000000000000000     | 	.quad 0
0x5a8: 0000000000000000     | 	.quad 0
0x5b0: 0000000000000000     | 	.quad 0
0x5b8: 0000000000000000     | 	.quad 0
0x5c0: 0000000000000000     | 	.quad 0
0x5c8: 0000000000000000     | 	.quad 0
0x5d0: 0000000000000000     | 	.quad 0
0x5d8: 0000000000000000     | 	.quad 0
0x5e0: 0000000000000000     | 	.quad 0
0x5e8: 0000000000000000     | 	.quad 0
0x5f0: 0000000000000000     | 	.quad 0
0x5f8: 0000000000000000     | 	.quad 0
0x600: 0000000000000000     | 	.quad 0
                            | 
0x608:                      | Stack:
