                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4e001000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f63801000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f70001000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: 30f80100000000000000 | 	irmovq $1, %r8
0x03e: 30fc0200000000000000 | 	irmovq $2, %r12
0x048: 30f90800000000000000 | 	irmovq $8, %r9
0x052: 30fd1000000000000000 | 	irmovq $0x10, %r13
0x05c: 6222                 | 	andq %rdx, %rdx
0x05e: 71fb00000000000000   | 	jle Done
0x067: 202e                 | 	rrmovq %rdx, %r14
0x069: 61ce                 | 	subq %r12, %r14
0x06b: 71c900000000000000   | 	jle Loop1
                            | 	
0x074:                      | Loop2: 
0x074: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x07e: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x088: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x092: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
0x09c: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x09e: 71a900000000000000   | 	jle Npos21		# if so, goto Npos:
0x0a7: 6080                 | 	addq %r8, %rax		# count++
0x0a9:                      | Npos21:	
0x0a9: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x0ab: 71b600000000000000   | 	jle Npos22		# if so, goto Npos:
0x0b4: 6080                 | 	addq %r8, %rax		# count++
0x0b6:                      | Npos22:
0x0b6: 61c2                 | 	subq %r12, %rdx
0x0b8: 60d7                 | 	addq %r13, %rdi
0x0ba: 60d6                 | 	addq %r13, %rsi
0x0bc: 202a                 | 	rrmovq %rdx, %r10
0x0be: 61ca                 | 	subq %r12, %r10
0x0c0: 767400000000000000   | 	jg Loop2
                            | 
0x0c9: 50a70000000000000000 | Loop1:	mrmovq (%rdi), %r10	# read val from src...
0x0d3: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x0dd: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0df: 71ea00000000000000   | 	jle Npos1		# if so, goto Npos:
0x0e8: 6080                 | 	addq %r8, %rax		# count++
0x0ea:                      | Npos1:	
0x0ea: 6182                 | 	subq %r8, %rdx		# len--
0x0ec: 6097                 | 	addq %r9, %rdi		# src++
0x0ee: 6096                 | 	addq %r9, %rsi		# dst++
0x0f0: 6222                 | 	andq %rdx,%rdx		# len > 0?
0x0f2: 76c900000000000000   | 	jg Loop1			# if so, goto Loop:
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x0fb:                      | Done:
0x0fb: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x0fc:                      | End:
                            | #/* $end ncopy-ys */
0x0fc:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x100:                      | 	.align 8
0x100:                      | src:
0x100: ffffffffffffffff     | 	.quad -1
0x108: 0200000000000000     | 	.quad 2
0x110: fdffffffffffffff     | 	.quad -3
0x118: 0400000000000000     | 	.quad 4
0x120: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x130:                      | 	.align 16
0x130:                      | Predest:
0x130: fadebc0000000000     | 	.quad 0xbcdefa
0x138:                      | dest:
0x138: abefcd0000000000     | 	.quad 0xcdefab
0x140: abefcd0000000000     | 	.quad 0xcdefab
0x148: abefcd0000000000     | 	.quad 0xcdefab
0x150: abefcd0000000000     | 	.quad 0xcdefab
0x158:                      | Postdest:
0x158: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x160:                      | .align 8
                            | # Run time stack
0x160: 0000000000000000     | 	.quad 0
0x168: 0000000000000000     | 	.quad 0
0x170: 0000000000000000     | 	.quad 0
0x178: 0000000000000000     | 	.quad 0
0x180: 0000000000000000     | 	.quad 0
0x188: 0000000000000000     | 	.quad 0
0x190: 0000000000000000     | 	.quad 0
0x198: 0000000000000000     | 	.quad 0
0x1a0: 0000000000000000     | 	.quad 0
0x1a8: 0000000000000000     | 	.quad 0
0x1b0: 0000000000000000     | 	.quad 0
0x1b8: 0000000000000000     | 	.quad 0
0x1c0: 0000000000000000     | 	.quad 0
0x1c8: 0000000000000000     | 	.quad 0
0x1d0: 0000000000000000     | 	.quad 0
0x1d8: 0000000000000000     | 	.quad 0
                            | 
0x1e0:                      | Stack:
